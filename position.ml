(* 座標のテーブル *)
let pos_table = [|(37.3, 306.2);  (* 0 *)
                  (91.1, 306.2);  (* 1 ピンクスタート地点 *)
                  (144.9, 306.2);
                  (198.7, 306.2);
                  (252.4, 306.2);
                  (306.2, 306.2);
                  (306.2, 252.4);
                  (306.2, 198.7);
                  (306.2, 144.9);
                  (306.2, 91.1);
                  (306.2, 37.3);
                  (360.0, 37.3);
                  (413.8, 37.3);
                  (413.8, 91.1);
                  (413.8, 144.9);
                  (413.8, 198.7);
                  (413.8, 252.4);
                  (413.8, 306.2);
                  (467.6, 306.2);
                  (521.3, 306.2);
                  (575.1, 306.2);
                  (628.9, 306.2);
                  (682.7, 306.2);
                  (682.7, 360.0);
                  (682.7, 413.8);
                  (628.9, 413.8);
                  (575.1, 413.8);
                  (521.3, 413.8);
                  (467.6, 413.8);
                  (413.8, 413.8);
                  (413.8, 467.6);
                  (413.8, 521.3);
                  (413.8, 575.1);
                  (413.8, 628.9);
                  (413.8, 682.7);
                  (360.0, 682.7);
                  (306.2, 682.7);
                  (306.2, 628.9);
                  (306.2, 575.1);
                  (306.2, 521.3);
                  (306.2, 467.6);
                  (306.2, 413.8);
                  (252.4, 413.8);
                  (198.7, 413.8);
                  (144.9, 413.8);
                  (91.1, 413.8);
                  (37.3, 413.8);
                  (37.3, 360.0);   (* 47 ピンク矢印*)
                  (91.1, 360.0);   (* 48~52 ピンクゴール *)
                  (144.9, 360.0);
                  (198.7, 360.0);
                  (252.4, 360.0);
                  (306.2, 360.0);
                  (360.0, 91.1);   (* 53~57 緑ゴール *)
                  (360.0, 144.9);
                  (360.0, 198.7);
                  (360.0, 252.4);
                  (360.0, 306.2);
                  (628.9, 360.0);  (* 58~62 オレンジゴール *)
                  (575.1, 360.0);
                  (521.3, 360.0);
                  (467.6, 360.0);
                  (413.8, 360.0);
                  (360.0, 628.9);  (* 63~67 青ゴール *)
                  (360.0, 575.1);
                  (360.0, 521.3);
                  (360.0, 467.6);
                  (360.0, 413.8);
                |]

(* プレイヤー番号と相対位置を受け取ったら、絶対位置を返す *)
(* return_ab : int -> int -> int *)
let return_ab num rel =
  (* 相対位置がマイナス、もしくは53以上になることはない *)
  if rel = 0 then 1 + 12 * num   (* 相対位置0は場に出たばかりの駒 *)
  else if rel < 48 then (rel + (12 * num)) mod 48
  else rel + 5 * num

(* プレイヤー番号と絶対位置を受け取ったら、相対位置を返す *)
(* 相対位置0は返さないので注意！ *)
(* return_rel : int -> int -> int *)
let return_rel num ab =
  (* 絶対位置がマイナス、もしくは68以上になることはない *)
  if ab < 48 then (ab - (12 * num) + 48) mod 48
  else ab - 5 * num

(* プレイヤー番号と相対位置を受け取ったら、座標を返す *)
(* return_pos : int -> int -> float * float *)
let return_pos num rel =
  pos_table.(return_ab num rel)

(* 絶対位置を受け取ったら、座標を返す *)
(* numは使わないがreturn_pos2_abと型を合わせるために受け取る *)
(* return_pos_ab : int -> int -> float * float *)
let return_pos_ab num ab =
  pos_table.(ab)

(* プレイヤー番号と相対位置を受け取ったら、小さい駒を表示する時の座標を返す *)
(* return_pos2 : int -> int -> float * float *)
let return_pos2 num rel =
  let d = 13.45 in
  match return_pos num rel with (x, y) ->
  match num with
    0 -> (x -. d, y -. d)
  | 1 -> (x +. d, y -. d)
  | 2 -> (x -. d, y +. d)
  | 3 -> (x +. d, y +. d)
  | _ -> assert false

(* プレイヤー番号と絶対位置を受け取ったら、小さい駒を表示する時の座標を返す *)
(* return_pos2_ab : int -> int -> float * float *)
let return_pos2_ab num ab =
  let d = 13.45 in
  match pos_table.(ab) with (x, y) ->
  match num with
    0 -> (x -. d, y -. d)
  | 1 -> (x +. d, y -. d)
  | 2 -> (x -. d, y +. d)
  | 3 -> (x +. d, y +. d)
  | _ -> assert false

(* 駒置き場の座標のテーブル *)
let pre_table = [|(60.0, 229.0);   (* 0~3ピンク *)
                  (155.0, 229.0);
                  (229.0, 155.0);
                  (229.0, 60.0);
                  (491.0, 60.0);   (* 4~7グリーン *)
                  (491.0, 155.0);
                  (565.0, 229.0);
                  (660.0, 229.0);
                  (660.0, 491.0);  (* 8~11オレンジ *)
                  (565.0, 491.0);
                  (491.0, 565.0);
                  (491.0, 660.0);
                  (229.0, 660.0);  (* 12~15青 *)
                  (229.0, 565.0);
                  (155.0, 491.0);
                  (60.0, 491.0)|]

(* プレイヤー番号numのpren個目の駒置き場の座標を返す *)
(* return_pre_pos : int -> int -> float * float *)
let return_pre_pos num pren =
  let pren' = pren - 1 + num * 4 in
  pre_table.(pren') 
